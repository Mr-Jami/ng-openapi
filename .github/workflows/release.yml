name: Release and Publish

on:
  push:
    branches:
      - main      # Stable releases
      - develop   # Pre-releases
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Pre-release tag (alpha, beta, rc)'
        required: false
        default: 'beta'
        type: string
      dry_run:
        description: 'Dry run (build only, do not publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build library
        run: npx nx run ng-openapi:build

      - name: Verify build output
        run: |
          ls -la dist/packages/ng-openapi/
          cat dist/packages/ng-openapi/package.json

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine release type and update version
        id: version
        working-directory: packages/ng-openapi
        run: |
          # Determine release parameters based on trigger and branch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            PRERELEASE_TAG="${{ github.event.inputs.prerelease_tag }}"
          
            # For manual triggers, check both release type AND current branch
            if [[ "$RELEASE_TYPE" == "prerelease" ]] || [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
              IS_PRERELEASE="true"
              NPM_TAG="${PRERELEASE_TAG:-beta}"
            elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              IS_PRERELEASE="false"
              NPM_TAG="latest"
            else
              # Default to prerelease for other branches
              IS_PRERELEASE="true"
              NPM_TAG="${PRERELEASE_TAG:-beta}"
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            RELEASE_TYPE="prerelease"
            PRERELEASE_TAG="beta"
            IS_PRERELEASE="true"
            NPM_TAG="beta"
          else
            # main branch push
            RELEASE_TYPE="patch"
            PRERELEASE_TAG=""
            IS_PRERELEASE="false"
            NPM_TAG="latest"
          fi
          
          echo "Branch: ${{ github.ref }}"
          echo "Release type: $RELEASE_TYPE"
          echo "Prerelease tag: $PRERELEASE_TAG"
          echo "Is prerelease: $IS_PRERELEASE"
          echo "NPM tag: $NPM_TAG"
          
          # Update version
          if [[ "$RELEASE_TYPE" == "prerelease" ]]; then
            npm version prerelease --preid="$PRERELEASE_TAG" --no-git-tag-version
          else
            npm version "$RELEASE_TYPE" --no-git-tag-version
          fi
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Set outputs
          {
            echo "version=$NEW_VERSION"
            echo "npm_tag=$NPM_TAG"
            echo "is_prerelease=$IS_PRERELEASE"
          } >> $GITHUB_OUTPUT

      - name: Copy updated package.json to dist
        run: |
          cp packages/ng-openapi/package.json dist/packages/ng-openapi/package.json
          echo "Updated package version: $(cat dist/packages/ng-openapi/package.json | jq -r '.version')"

      - name: Publish to NPM
        if: github.event.inputs.dry_run != 'true'
        working-directory: dist/packages/ng-openapi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing version ${{ steps.version.outputs.version }} with tag ${{ steps.version.outputs.npm_tag }}"
          npm publish --tag ${{ steps.version.outputs.npm_tag }} --access public
          echo "✅ Published successfully!"

      - name: Create Git tag and push
        if: github.event.inputs.dry_run != 'true'
        run: |
          git add packages/ng-openapi/package.json
          git commit -m "chore: release v${{ steps.version.outputs.version }}"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin HEAD --tags
          echo "✅ Git tag created and pushed"

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## 🚀 ng-openapi v${{ steps.version.outputs.version }}
            
            ### 📦 Installation
            ```bash
            # Install this version
            npm install -g ng-openapi@${{ steps.version.outputs.version }}
            
            # Install latest stable
            npm install -g ng-openapi
            ```
            
            ### 🛠️ Usage
            ```bash
            ng-openapi --help
            ng-openapi -i swagger.json -o ./src/api
            ng-openapi -c openapi.config.ts
            ```
            
            ### 🔗 Links
            - 📚 [NPM Package](https://www.npmjs.com/package/ng-openapi)
            - 📖 [Documentation](https://github.com/${{ github.repository }}#readme)
            - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
          prerelease: ${{ steps.version.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Tag**: ${{ steps.version.outputs.npm_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ steps.version.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Package**: https://www.npmjs.com/package/ng-openapi" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "- **Dry Run**: ✅ No actual publishing occurred" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Published**: ✅ Successfully published to NPM" >> $GITHUB_STEP_SUMMARY
          fi