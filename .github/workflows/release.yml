name: Release and Publish

on:
  push:
    branches:
      - main      # Stable releases
      - develop   # Pre-releases
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Pre-release tag (alpha, beta, rc)'
        required: false
        default: 'beta'
        type: string
      dry_run:
        description: 'Dry run (build only, do not publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  # Check if PR author is a maintainer
  check-permissions:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      is-maintainer: ${{ steps.check.outputs.is-maintainer }}
    steps:
      - name: Check if PR author is maintainer
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Check if the PR author has write access to the repository
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.payload.pull_request.user.login
              });
            
              console.log(`User: ${context.payload.pull_request.user.login}`);
              console.log(`Permission level: ${permission.permission}`);
            
              // Allow admin, maintain, and write permissions
              const isMaintainer = ['admin', 'maintain', 'write'].includes(permission.permission);
            
              core.setOutput('is-maintainer', isMaintainer);
            
              if (!isMaintainer) {
                console.log('❌ User does not have maintainer permissions');
              } else {
                console.log('✅ User has maintainer permissions');
              }
            
              return isMaintainer;
            } catch (error) {
              console.error('Error checking permissions:', error);
              core.setOutput('is-maintainer', false);
              return false;
            }

  release:
    runs-on: ubuntu-latest
    needs: [ check-permissions ]
    if: |
      always() && (
        github.event_name == 'workflow_dispatch' || 
        github.ref == 'refs/heads/main' || 
        github.ref == 'refs/heads/develop' || 
        (github.event_name == 'pull_request' && needs.check-permissions.outputs.is-maintainer == 'true')
      )

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build library
        run: npx nx run ng-openapi:build

      - name: Verify build output
        run: |
          ls -la dist/packages/ng-openapi/
          cat dist/packages/ng-openapi/package.json

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine release parameters
        id: release-params
        run: |
          # Determine release parameters based on trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            PRERELEASE_TAG="${{ github.event.inputs.prerelease_tag }}"
            IS_PRERELEASE="${{ github.event.inputs.release_type == 'prerelease' }}"
          
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PR prerelease with branch name, PR number, and commit SHA for uniqueness
            BRANCH_NAME="${{ github.head_ref }}"
            PR_NUMBER="${{ github.event.number }}"
            SHORT_SHA="${{ github.event.pull_request.head.sha }}"
            SHORT_SHA=${SHORT_SHA:0:7}  # Use first 7 chars of SHA
          
            # Sanitize branch name for npm tag (replace special chars with dashes)
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          
            RELEASE_TYPE="prerelease"
            PRERELEASE_TAG="pr-${PR_NUMBER}-${SANITIZED_BRANCH}-${SHORT_SHA}"
            IS_PRERELEASE="true"
          
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            RELEASE_TYPE="prerelease"
            PRERELEASE_TAG="beta"
            IS_PRERELEASE="true"
          
          else
            # main branch - stable release
            RELEASE_TYPE="patch"
            PRERELEASE_TAG=""
            IS_PRERELEASE="false"
          fi
          
          echo "Release type: $RELEASE_TYPE"
          echo "Prerelease tag: $PRERELEASE_TAG"
          echo "Is prerelease: $IS_PRERELEASE"
          
          # Set outputs
          {
            echo "release_type=$RELEASE_TYPE"
            echo "prerelease_tag=$PRERELEASE_TAG"
            echo "is_prerelease=$IS_PRERELEASE"
          } >> $GITHUB_OUTPUT

      - name: Update version
        id: version
        working-directory: packages/ng-openapi
        run: |
          # Update version based on release type
          if [[ "${{ steps.release-params.outputs.is_prerelease }}" == "true" ]]; then
            npm version prerelease --preid="${{ steps.release-params.outputs.prerelease_tag }}" --no-git-tag-version
            NPM_TAG="${{ steps.release-params.outputs.prerelease_tag }}"
          else
            npm version "${{ steps.release-params.outputs.release_type }}" --no-git-tag-version
            NPM_TAG="latest"
          fi
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Set outputs
          {
            echo "version=$NEW_VERSION"
            echo "npm_tag=$NPM_TAG"
          } >> $GITHUB_OUTPUT

      - name: Copy updated package.json to dist
        run: |
          cp packages/ng-openapi/package.json dist/packages/ng-openapi/package.json
          echo "Updated package version: $(cat dist/packages/ng-openapi/package.json | jq -r '.version')"

      - name: Publish to NPM
        if: github.event.inputs.dry_run != 'true'
        working-directory: dist/packages/ng-openapi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing version ${{ steps.version.outputs.version }} with tag ${{ steps.version.outputs.npm_tag }}"
          npm publish --tag ${{ steps.version.outputs.npm_tag }} --access public
          echo "✅ Published successfully!"

      - name: Create Git tag and push
        if: github.event.inputs.dry_run != 'true' && github.event_name != 'pull_request'
        run: |
          git add packages/ng-openapi/package.json
          git commit -m "chore: release v${{ steps.version.outputs.version }}"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin HEAD --tags
          echo "✅ Git tag created and pushed"

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true' && github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## 🚀 ng-openapi v${{ steps.version.outputs.version }}
            
            ### 📦 Installation
            ```bash
            # Install this version
            npm install ng-openapi@${{ steps.version.outputs.version }} --save-dev
            
            # Install latest stable
            npm install ng-openapi --save-dev
            ```
            
            ### 🛠️ Usage
            ```bash
            ng-openapi --help
            ng-openapi -i swagger.json -o ./src/api
            ng-openapi -c openapi.config.ts
            ```
            
            ### 🔗 Links
            - 📚 [NPM Package](https://www.npmjs.com/package/ng-openapi)
            - 📖 [Documentation](https://github.com/${{ github.repository }}#readme)
            - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
          prerelease: ${{ steps.release-params.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR with release info
        if: github.event_name == 'pull_request' && github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🚀 PR Prerelease Published
            
            **Version**: \`v${{ steps.version.outputs.version }}\`
            **NPM Tag**: \`${{ steps.version.outputs.npm_tag }}\`
            **Commit**: \`${{ github.event.pull_request.head.sha }}\`
            
            ### 📦 Install this PR version:
            \`\`\`bash
            npm install ng-openapi@${{ steps.version.outputs.version }} --save-dev
            \`\`\`
            
            ### 🔗 Links
            - [NPM Package](https://www.npmjs.com/package/ng-openapi/v/${{ steps.version.outputs.version }})
            - [All versions](https://www.npmjs.com/package/ng-openapi?activeTab=versions)
            
            > This version is unique to commit \`${{ github.event.pull_request.head.sha }}\` and will not conflict with other releases.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Comment on PR if not maintainer
        if: github.event_name == 'pull_request' && needs.check-permissions.outputs.is-maintainer != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ⚠️ PR Prerelease Skipped
            
            This PR was not published to NPM because the author does not have maintainer permissions.
            
            **Note**: Only repository maintainers (with write, maintain, or admin access) can trigger automatic PR releases.
            
            If you believe this is an error, please contact a maintainer.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Tag**: ${{ steps.version.outputs.npm_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ steps.release-params.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ steps.release-params.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Package**: https://www.npmjs.com/package/ng-openapi" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "- **Dry Run**: ✅ No actual publishing occurred" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Published**: ✅ Successfully published to NPM" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "- **PR Release**: ✅ This is a PR prerelease" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit SHA**: ${{ github.event.pull_request.head.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Install Command**: \`npm install ng-openapi@${{ steps.version.outputs.version }} --save-dev\`" >> $GITHUB_STEP_SUMMARY
          fi