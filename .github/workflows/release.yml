name: Release and Publish

on:
  push:
    branches:
      - main      # Stable releases
      - develop   # Pre-releases
    tags:
      - 'v*'      # Version tags
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Pre-release tag (alpha, beta, rc)'
        required: false
        default: 'beta'
        type: string
      dry_run:
        description: 'Dry run (build only, do not publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Job 1: Determine release strategy
  determine-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.decision.outputs.should_release }}
      is_prerelease: ${{ steps.decision.outputs.is_prerelease }}
      version_tag: ${{ steps.decision.outputs.version_tag }}
      release_type: ${{ steps.decision.outputs.release_type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release strategy
        id: decision
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            if [[ "${{ github.event.inputs.release_type }}" == "prerelease" ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "version_tag=${{ github.event.inputs.prerelease_tag }}" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "version_tag=latest" >> $GITHUB_OUTPUT
            fi
            echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "version_tag=latest" >> $GITHUB_OUTPUT
            echo "release_type=patch" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "version_tag=beta" >> $GITHUB_OUTPUT
            echo "release_type=prerelease" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            if [[ "${{ github.ref_name }}" =~ -[a-zA-Z] ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "version_tag=beta" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "version_tag=latest" >> $GITHUB_OUTPUT
            fi
            echo "release_type=from_tag" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "version_tag=latest" >> $GITHUB_OUTPUT
            echo "release_type=none" >> $GITHUB_OUTPUT
          fi

  # Job 2: Build and test
  build-and-test:
    runs-on: ubuntu-latest
    needs: determine-release
    if: needs.determine-release.outputs.should_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build library
        run: npx nx run ng-openapi:build

      - name: Verify build output
        run: |
          ls -la dist/packages/ng-openapi/
          echo "Checking package.json..."
          cat dist/packages/ng-openapi/package.json
          echo "Checking CLI binary..."
          ls -la dist/packages/ng-openapi/cli.cjs

      # Upload build artifacts for the publish job
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/packages/ng-openapi/
          retention-days: 1

  # Job 3: Version and publish
  publish:
    runs-on: ubuntu-latest
    needs: [determine-release, build-and-test]
    if: needs.determine-release.outputs.should_release == 'true' && github.event.inputs.dry_run != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/packages/ng-openapi/

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update version and get new version
        id: version
        working-directory: packages/ng-openapi
        run: |
          echo "Current version: $(npm version --json | jq -r '.["ng-openapi"]')"
          
          if [[ "${{ needs.determine-release.outputs.release_type }}" == "from_tag" ]]; then
            # Extract version from tag
            TAG_VERSION="${{ github.ref_name }}"
            CLEAN_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix if present
            echo "Setting version to: $CLEAN_VERSION"
            npm version $CLEAN_VERSION --no-git-tag-version
            echo "new_version=v$CLEAN_VERSION" >> $GITHUB_OUTPUT
            echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.determine-release.outputs.is_prerelease }}" == "true" ]]; then
            if [[ "${{ needs.determine-release.outputs.release_type }}" == "prerelease" ]]; then
              echo "Creating prerelease with tag: ${{ needs.determine-release.outputs.version_tag }}"
              NEW_VERSION=$(npm version prerelease --preid=${{ needs.determine-release.outputs.version_tag }} --no-git-tag-version)
            else
              echo "Creating ${{ needs.determine-release.outputs.release_type }} prerelease"
              NEW_VERSION=$(npm version ${{ needs.determine-release.outputs.release_type }} --preid=${{ needs.determine-release.outputs.version_tag }} --no-git-tag-version)
            fi
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "clean_version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
          else
            echo "Creating ${{ needs.determine-release.outputs.release_type }} release"
            NEW_VERSION=$(npm version ${{ needs.determine-release.outputs.release_type }} --no-git-tag-version)
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "clean_version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
          fi
          
          echo "Final version: $(npm version --json | jq -r '.["ng-openapi"]')"

      - name: Copy updated package.json to dist
        run: |
          echo "Copying package.json to dist..."
          cp packages/ng-openapi/package.json dist/packages/ng-openapi/package.json
          echo "Updated dist package.json version:"
          cat dist/packages/ng-openapi/package.json | jq -r '.version'

      - name: Publish to NPM
        working-directory: dist/packages/ng-openapi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing package..."
          echo "Current directory: $(pwd)"
          echo "Package version: $(cat package.json | jq -r '.version')"
          
          if [[ "${{ needs.determine-release.outputs.is_prerelease }}" == "true" ]]; then
            echo "Publishing as prerelease with tag: ${{ needs.determine-release.outputs.version_tag }}"
            npm publish --tag ${{ needs.determine-release.outputs.version_tag }} --access public
          else
            echo "Publishing as stable release"
            npm publish --access public
          fi
          
          echo "✅ Published successfully!"

      - name: Create Git tag and push
        if: needs.determine-release.outputs.release_type != 'from_tag'
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          echo "Creating git tag: $VERSION"
          git add packages/ng-openapi/package.json
          git commit -m "chore: release $VERSION"
          git tag $VERSION
          git push origin HEAD --tags
          echo "✅ Git tag created and pushed"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: |
            ## 🚀 ng-openapi ${{ steps.version.outputs.new_version }}
            
            ### 📦 Installation
            ```bash
            # Latest stable
            npm install -g ng-openapi
            
            # This specific version
            npm install -g ng-openapi@${{ steps.version.outputs.clean_version }}
            ```
            
            ### 🛠️ Usage
            ```bash
            ng-openapi --help
            ng-openapi -i swagger.json -o ./src/api
            ng-openapi -c openapi.config.ts
            ```
            
            ### 🔗 Links
            - 📚 [NPM Package](https://www.npmjs.com/package/ng-openapi)
            - 📖 [Documentation](https://github.com/${{ github.repository }}#readme)
            - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ steps.version.outputs.new_version }}
          prerelease: ${{ needs.determine-release.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 4: Notify on success/failure
  notify:
    runs-on: ubuntu-latest
    needs: [determine-release, build-and-test, publish]
    if: always() && needs.determine-release.outputs.should_release == 'true'
    steps:
      - name: Notify success
        if: needs.publish.result == 'success'
        run: |
          echo "🎉 Successfully published ng-openapi to NPM!"
          echo "📦 Package: https://www.npmjs.com/package/ng-openapi"
          echo "🏷️ Tag: ${{ needs.determine-release.outputs.version_tag }}"
          echo "🔖 Prerelease: ${{ needs.determine-release.outputs.is_prerelease }}"

      - name: Notify failure
        if: needs.publish.result == 'failure' || needs.build-and-test.result == 'failure'
        run: |
          echo "❌ Failed to publish ng-openapi"
          echo "📋 Check the logs above for details"
          exit 1